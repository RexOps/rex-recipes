#
# (c) Jan Gehring <jan.gehring@gmail.com>
# 
# vim: set ts=3 sw=3 tw=0:
# vim: set expandtab:
   
package Rex::Ext::Stack;

use strict;
use warnings;

use Rex -base;

my @stack_dir = ();

push(@INC, sub {
   my $mod_to_load = $_[1];
   $mod_to_load =~ s/\.pm$//;
   $mod_to_load =~ s/::/\//g;
   for my $s_d (@stack_dir) {
      my ($mod) = ($mod_to_load =~ m/\/([^\/]+)$/);

      if(-f "$s_d/$mod_to_load/.$mod.stack") {
         $Rex::MODULE_PATHS->{$mod_to_load} = {path => "$s_d/$mod_to_load"};
         my $mod_package_name = $mod_to_load;
         $mod_package_name =~ s/\//::/g;
         $Rex::MODULE_PATHS->{$mod_package_name} = {path => "$s_d/$mod_to_load"};
         open(my $fh, "<", "$s_d/$mod_to_load/.$mod.stack") or die($!);
         return $fh;
      }
   }

   return undef;
});


sub import {

   my ($class, @path) = @_;


   for my $dir (@path) {
      my ($base_path, $mod_prefix) = ($dir =~ m/^(.*)\/(.*?)$/);
      push(@stack_dir, $base_path);

      opendir(my $dh, $dir) or die($!);
      while(my $entry = readdir($dh)) {
         next if($entry =~ m/^\./);
         if(-d "$dir/$entry") {

            if(-f "$dir/$entry/Rexfile") {

               my $rexfile = eval { local(@ARGV, $/) = ("$dir/$entry/Rexfile"); <>; };
               my $found_use_rex = $rexfile =~ m/use Rex/gms;

               my $package_name = $mod_prefix . "::" . $entry;

               open(my $fh, ">", "$dir/$entry/.$entry.stack") or die($!);
               print $fh "# This file is autogenerated with Rex::Ext::Stack.\n";
               print $fh "# Don't edit this file, this file will be overwritten.\n";
               print $fh "#--------------------------------------------------------------------------------\n\n";
               print $fh "package $package_name;\n";
               print $fh "use Rex -base;\n" unless $found_use_rex;
               print $fh $rexfile;
               print $fh "'Stacked - do not edit!';\n";
               close($fh);

               push(@INC, "$dir/$entry/lib");

            }

            next;
         }
      }
      closedir($dh);
   }
}

=pod

=head1 NAME

Rex::Ext::Stack - Stack Rexfiles.

With this extension you can stack multiple Rexfiles to one together. Think of it for a way to use normal Rexfiles as Rex modules.


=head1 SYNOPSIS

Assume you have a filestructure like this:

 + modules
 |
 +--+ apache
 |  +--+ Rexfile
 |  |  + files
 |  + mysql
 |  +--+ Rexfile
 |     + files
 |
 + services  
 +--+ frontend
    +--+ Rexfile
       + files

And want to use your different Rexfile in one higher-level Rexfile you can use this module.

 use Rex::Ext::Stack '/path/to/modules', '/path/to/services';
   
 require modules::apache;
 require modules::mysql;
 require services::frontend;
    
 task "prepare", sub {
    modules::apache::setup();    # call setup task from apache Rexfile
    modules::mysql::setup();     # call setup task from mysql Rexfile
         
    services::frontend::setup(); # call setup task from frontend Rexfile
 };

=cut

1;
